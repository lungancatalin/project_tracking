{"version":3,"sources":["components/images/logo.svg","components/images/icon-hamburger.svg","components/images/icon-close.svg","components/images/illustration-devices.svg","components/navSection.jsx","components/mainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavSection","hamburger","document","getElementById","body","addEventListener","e","classList","toggle","className","src","Logo","alt","id","IconHamburger","IconClose","Component","MainContent","Illustrration","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,kD,2OCKtBC,E,kLAEb,IAAMC,EAAYC,SAASC,eAAe,aAClCC,EAASF,SAATE,KAERH,EAAUI,iBAAiB,SAAS,SAAAC,GAChCF,EAAKG,UAAUC,OAAO,iB,+BAM1B,OACI,6BACI,yBAAKC,UAAU,aACf,6BACI,yBAAKC,IAAKC,IAAMC,IAAI,UAExB,4BAAQH,UAAU,YAAYI,GAAG,aAC7B,yBAAKJ,UAAU,iBAAiBC,IAAKI,IAAeF,IAAI,mBACxD,yBAAKH,UAAU,aAAaC,IAAKK,IAAWH,IAAI,gBAEpD,4BACI,uCACA,wCACA,uCACA,wBAAIH,UAAU,WAAd,gB,GA1BoBO,a,iBCFnBC,E,uKAEb,OACI,8BACI,yBAAKR,UAAU,4BACX,6BACI,4BACI,qCADJ,uBAKA,gEACA,iFAEA,yBAAKA,UAAU,QACX,4BAAQA,UAAU,OAAlB,mBACA,uDAIR,6BACI,yBAAKA,UAAU,gBAAgBC,IAAKQ,IAAeN,IAAI,gC,GArBtCI,aCW1BG,MATf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.daa50c8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dfc21d9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-hamburger.4648b31c.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-close.f563a0c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/illustration-devices.d8da55ea.svg\";","import React, {Component} from 'react';\r\nimport Logo from './images/logo.svg';\r\nimport IconHamburger from './images/icon-hamburger.svg';\r\nimport IconClose from './images/icon-close.svg';\r\n\r\nexport default class NavSection extends Component {\r\n    componentDidMount(){\r\n        const hamburger = document.getElementById('hamburger');\r\n        const { body } = document;\r\n        \r\n        hamburger.addEventListener('click', e => {\r\n            body.classList.toggle('show-nav');\r\n        })\r\n}   \r\n\r\n\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <div className=\"container\">\r\n                <div>\r\n                    <img src={Logo} alt=\"logo\" />\r\n                </div>\r\n                <button className=\"hamburger\" id=\"hamburger\">\r\n                    <img className=\"icon-hamburger\" src={IconHamburger} alt=\"icon-hamburger\" />\r\n                    <img className=\"icon-close\" src={IconClose} alt=\"icon-close\" />\r\n                </button>\r\n                <ul>\r\n                    <li>Product</li>\r\n                    <li>Features</li>\r\n                    <li>Pricing</li>\r\n                    <li className=\"unicorn\">Login</li>\r\n                </ul>\r\n                </div>\r\n          </nav>\r\n        )\r\n    }    \r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport Illustrration from './images/illustration-devices.svg';\r\n\r\nexport default class MainContent extends Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                <div className=\"container mobile-reverse\">\r\n                    <div>\r\n                        <h3>\r\n                            <span>New</span>\r\n                            Monograph Dashboard\r\n                        </h3>\r\n\r\n                        <h1>Powerful insights into your team</h1>\r\n                        <p>Project planning and time tracking for agile teams</p>\r\n\r\n                        <div className=\"flex\">\r\n                            <button className=\"btn\">Schedule a demo</button>\r\n                            <h3>to see a live preview</h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <img className=\"illustrration\" src={Illustrration} alt=\"illustration-devices\"/>\r\n                    </div>\r\n\r\n                </div>\r\n            </main>\r\n        )\r\n    }    \r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport NavSection from \"./components/navSection\";\nimport MainContent from \"./components/mainContent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavSection />\n      <MainContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}